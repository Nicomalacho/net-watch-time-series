
// This file is automatically generated. Do not edit it directly.
import React, { useState, useEffect } from "react";
import { Card, CardHeader, CardTitle, CardContent } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { toast } from "sonner";
import { networkService } from "@/services/networkService";
import { Play, Pause, TrashIcon, Download, Share2, UserCircle2 } from "lucide-react";
import { Link } from "react-router-dom";
import { supabase } from "@/integrations/supabase/client";

interface ControlPanelProps {
  selectedNetwork?: string;
}

const ControlPanel: React.FC<ControlPanelProps> = ({ selectedNetwork }) => {
  const [isMonitoring, setIsMonitoring] = useState(false);
  const [isAuthenticated, setIsAuthenticated] = useState<boolean>(false);
  const [isSyncing, setIsSyncing] = useState(false);

  useEffect(() => {
    // Check if the service is already monitoring
    const checkMonitoring = () => {
      const monitoring = networkService.isMonitoring;
      setIsMonitoring(monitoring);
      if (monitoring) {
        console.log("Network monitoring is active");
      }
    };

    checkMonitoring();
    
    // Check auth status
    const checkAuthStatus = async () => {
      const { data: { session } } = await supabase.auth.getSession();
      setIsAuthenticated(!!session?.user);
    };
    
    checkAuthStatus();
    
    const { subscription } = supabase.auth.onAuthStateChange((_event, session) => {
      setIsAuthenticated(!!session?.user);
    });
    
    return () => subscription.unsubscribe();
  }, []);

  const handleStartStop = () => {
    if (isMonitoring) {
      networkService.stopMonitoring();
      setIsMonitoring(false);
      toast.info("Network monitoring stopped");
    } else {
      networkService.startMonitoring();
      setIsMonitoring(true);
      toast.success("Network monitoring started");
    }
  };

  const handleClearData = () => {
    networkService.clearData();
    toast.info("Monitoring data cleared");
  };

  const handleExport = () => {
    try {
      networkService.downloadCSV(selectedNetwork);
      toast.success("Data exported successfully");
    } catch (error) {
      console.error("Export error:", error);
      toast.error("Failed to export data");
    }
  };
  
  const handleSync = async () => {
    if (!isAuthenticated) {
      toast.error("Please log in to sync your data");
      return;
    }
    
    setIsSyncing(true);
    try {
      const { data: { session } } = await supabase.auth.getSession();
      const user_id = session?.user.id;
      
      if (!user_id) {
        toast.error("Authentication error. Please log in again.");
        setIsSyncing(false);
        return;
      }
      
      const result = await networkService.syncToSupabase(user_id);
      if (result) {
        toast.success("Network metrics synced to your account");
      } else {
        toast.error("Failed to sync metrics");
      }
    } catch (error: any) {
      console.error("Sync error:", error);
      toast.error(error.message || "Failed to sync data");
    } finally {
      setIsSyncing(false);
    }
  };

  return (
    <Card>
      <CardHeader className="pb-2">
        <CardTitle className="flex items-center gap-2">Controls</CardTitle>
      </CardHeader>
      <CardContent className="space-y-4">
        <div className="grid grid-cols-2 gap-2">
          <Button
            onClick={handleStartStop}
            variant={isMonitoring ? "destructive" : "default"}
            className="w-full"
          >
            {isMonitoring ? (
              <>
                <Pause className="h-4 w-4 mr-2" /> Stop
              </>
            ) : (
              <>
                <Play className="h-4 w-4 mr-2" /> Start
              </>
            )}
          </Button>

          <Button
            onClick={handleClearData}
            variant="outline"
            className="w-full"
          >
            <TrashIcon className="h-4 w-4 mr-2" /> Clear
          </Button>
        </div>

        <div className="grid grid-cols-2 gap-2">
          <Button
            onClick={handleExport}
            variant="secondary"
            className="w-full"
          >
            <Download className="h-4 w-4 mr-2" /> Export
          </Button>
          
          <Button
            onClick={handleSync}
            variant="secondary"
            className="w-full"
            disabled={isSyncing || !isAuthenticated}
          >
            {isSyncing ? "Syncing..." : (
              <>
                <Share2 className="h-4 w-4 mr-2" /> Sync
              </>
            )}
          </Button>
        </div>
        
        <div className="grid grid-cols-2 gap-2">
          {isAuthenticated ? (
            <Button
              asChild
              variant="outline"
              className="w-full"
            >
              <Link to="/share">
                <Share2 className="h-4 w-4 mr-2" /> Share
              </Link>
            </Button>
          ) : (
            <Button
              asChild
              variant="outline"
              className="w-full"
            >
              <Link to="/auth">
                <UserCircle2 className="h-4 w-4 mr-2" /> Sign In
              </Link>
            </Button>
          )}
          
          <Button
            asChild
            variant="outline"
            className="w-full"
          >
            <Link to="/history">History</Link>
          </Button>
        </div>
      </CardContent>
    </Card>
  );
};

export default ControlPanel;
